#!/usr/bin/env tsx

/**
 * Script de migra√ß√£o para corrigir campanhas com JSON Schema inv√°lido
 * 
 * Este script:
 * 1. Busca todas as campanhas existentes
 * 2. Para cada campanha, executa validateAndNormalizeCampaign()
 * 3. Se result.corrected = true, salva os dados corrigidos nos campos apropriados
 * 4. Atualiza campos: look_items, palette_hex, seo_keywords, brand_tone, governance, telemetry
 * 5. Inclui logs detalhados do processo
 */

import { createClient } from '@supabase/supabase-js';
import { validateAndNormalizeCampaign } from '../src/lib/validateCampaign';
import { Campaign } from '../src/types/campaign';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

// Cliente Supabase com service role para bypass RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

interface MigrationStats {
  total: number;
  processed: number;
  corrected: number;
  errors: number;
  skipped: number;
}

async function migrateCampaigns() {
  console.log('üöÄ Iniciando migra√ß√£o de campanhas...\n');
  
  const stats: MigrationStats = {
    total: 0,
    processed: 0,
    corrected: 0,
    errors: 0,
    skipped: 0
  };

  try {
    // 1. Buscar todas as campanhas
    console.log('üìã Buscando campanhas...');
    const { data: campaigns, error: fetchError } = await supabase
      .from('campaigns')
      .select('*')
      .order('created_at', { ascending: true });

    if (fetchError) {
      console.error('‚ùå Erro ao buscar campanhas:', fetchError);
      return;
    }

    if (!campaigns || campaigns.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhuma campanha encontrada');
      return;
    }

    stats.total = campaigns.length;
    console.log(`‚úÖ Encontradas ${stats.total} campanhas\n`);

    // 2. Processar cada campanha
    for (let i = 0; i < campaigns.length; i++) {
      const campaign = campaigns[i] as Campaign;
      const progress = `[${i + 1}/${stats.total}]`;
      
      console.log(`${progress} Processando: "${campaign.title}" (ID: ${campaign.id})`);

      try {
        // Executar valida√ß√£o e normaliza√ß√£o
        const result = await validateAndNormalizeCampaign(campaign);
        
        console.log(`  üìä Valida√ß√£o: ${result.valid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
        console.log(`  üîß Corre√ß√µes: ${result.corrected ? '‚úÖ Sim' : '‚ùå N√£o'}`);
        
        if (result.errors.length > 0) {
          console.log(`  ‚ö†Ô∏è  Erros: ${result.errors.join(', ')}`);
        }
        
        if (result.warnings.length > 0) {
          console.log(`  ‚ö†Ô∏è  Avisos: ${result.warnings.join(', ')}`);
        }

        // Se houve corre√ß√µes, salvar no banco
        if (result.corrected && result.correctedData) {
          console.log(`  üíæ Salvando corre√ß√µes...`);
          console.log(`  üìù Campos corrigidos: ${result.validationLog.correctedFields.join(', ')}`);

          const updateData = {
            look_items: result.correctedData.look?.items || [],
            palette_hex: result.correctedData.look?.palette_hex || [],
            seo_keywords: result.correctedData.descriptions?.seo_keywords || [],
            brand_tone: result.correctedData.descriptions?.brand_tone || null,
            governance: result.correctedData.governance || {},
            telemetry: result.correctedData.telemetry || {},
            updated_at: new Date().toISOString()
          };

          const { error: updateError } = await supabase
            .from('campaigns')
            .update(updateData)
            .eq('id', campaign.id);

          if (updateError) {
            console.error(`  ‚ùå Erro ao salvar corre√ß√µes:`, updateError);
            stats.errors++;
          } else {
            console.log(`  ‚úÖ Corre√ß√µes salvas com sucesso`);
            stats.corrected++;
          }
        } else {
          console.log(`  ‚ÑπÔ∏è  Nenhuma corre√ß√£o necess√°ria`);
          stats.skipped++;
        }

        stats.processed++;
        console.log(`  ‚è±Ô∏è  Tempo de valida√ß√£o: ${result.validationLog.duration_ms}ms\n`);

      } catch (error) {
        console.error(`  ‚ùå Erro ao processar campanha:`, error);
        stats.errors++;
      }
    }

    // 3. Relat√≥rio final
    console.log('üìä RELAT√ìRIO FINAL DA MIGRA√á√ÉO');
    console.log('================================');
    console.log(`Total de campanhas: ${stats.total}`);
    console.log(`Processadas: ${stats.processed}`);
    console.log(`Corrigidas: ${stats.corrected}`);
    console.log(`Sem corre√ß√£o: ${stats.skipped}`);
    console.log(`Erros: ${stats.errors}`);
    console.log(`Taxa de sucesso: ${((stats.processed / stats.total) * 100).toFixed(1)}%`);
    console.log(`Taxa de corre√ß√£o: ${((stats.corrected / stats.total) * 100).toFixed(1)}%`);

    if (stats.corrected > 0) {
      console.log('\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!');
      console.log('üí° As campanhas agora devem exibir JSON Schema v√°lido nos indicadores de qualidade.');
    } else {
      console.log('\n‚ÑπÔ∏è  Migra√ß√£o conclu√≠da - nenhuma corre√ß√£o foi necess√°ria.');
    }

  } catch (error) {
    console.error('‚ùå Erro fatal durante a migra√ß√£o:', error);
    process.exit(1);
  }
}

// Executar migra√ß√£o se chamado diretamente
if (require.main === module) {
  migrateCampaigns()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Erro fatal:', error);
      process.exit(1);
    });
}

export { migrateCampaigns };